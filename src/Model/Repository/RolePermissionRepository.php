<?php
declare(strict_types=1);
/**
 * Contains class RolePermissionRepository.
 *
 * PHP version 7.2+
 *
 * LICENSE:
 * This file is part of ChartItMD.
 * Copyright (C) 2019 ChartItMD Development Group
 *
 * Additional code from {@link https://github.com/potievdev/slim-rbac} with MIT
 * license by Abdulmalik Abdulpotiev.
 *
 * @see       MIT_LICENSE
 * @author    Abdulmalik Abdulpotiev <potievdev@gmail.com>
 *
 * @author    Michael Cummings <mgcummings@yahoo.com>
 * @copyright 2019 ChartItMD Development Group
 * @license   Proprietary
 */

namespace ChartItMD\Model\Repository;

use ChartItMD\Model\Entity\Permission;
use Doctrine\ORM\EntityRepository;

/**
 * RolePermissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RolePermissionRepository extends EntityRepository {
    /**
     * @param Permission $permission
     *
     * @return array
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    public function getRoleIdsByPermission(Permission $permission): array {
        $qb = $this->createQueryBuilder('rolePermission');
        $qb->select('rolePermission.roleId')
           ->where(
               $qb->expr()
                  ->eq('rolePermission.permissionId', $permission->getId())
           );
        return $qb->getQuery()
                  ->getArrayResult();
    }
    /**
     * Search RolePermission record. If found return true else false
     *
     * @param string   $permissionId
     * @param string[] $roleIds
     *
     * @return bool
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    public function isPermissionAssigned(string $permissionId, array $roleIds): bool {
        $qb = $this->createQueryBuilder('rolePermission');
        $result =
            $qb->select('rolePermission.permissionId')
               ->where(
                   $qb->expr()
                      ->andX(
                          $qb->expr()
                             ->eq('rolePermission.permissionId', $permissionId),
                          $qb->expr()
                             ->in('rolePermission.roleId', $roleIds)
                      )
               )
               ->setMaxResults(1)
               ->getQuery()
               ->getArrayResult();
        return count($result) > 0;
    }
}
