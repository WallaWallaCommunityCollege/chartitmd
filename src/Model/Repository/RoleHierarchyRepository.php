<?php
declare(strict_types=1);
/**
 * Contains class RoleHierarchyRepository.
 *
 * PHP version 7.2+
 *
 * LICENSE:
 * This file is part of ChartItMD.
 * Copyright (C) 2019 ChartItMD Development Group
 *
 * Additional code from {@link https://github.com/potievdev/slim-rbac} with MIT
 * license by Abdulmalik Abdulpotiev.
 *
 * @see       MIT_LICENSE
 * @author    Abdulmalik Abdulpotiev <potievdev@gmail.com>
 *
 * @author    Michael Cummings <mgcummings@yahoo.com>
 * @copyright 2019 ChartItMD Development Group
 * @license   Proprietary
 */

namespace ChartItMD\Model\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\QueryException;

/**
 * UserRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleHierarchyRepository extends EntityRepository {
    /**
     * @param string[] $rootRoleIds
     *
     * @return string[]
     * @throws QueryException
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    public function getAllRoleIdsHierarchy(array $rootRoleIds): array {
        $childRoleIds = $this->getAllChildRoleIds($rootRoleIds);
        return array_merge($rootRoleIds, $childRoleIds);
    }
    /**
     * Finding child identifier in roles three where $parentRoleId is in the top of three
     *
     * @param string $parentRoleId
     * @param string $findingChildId
     *
     * @return bool
     * @throws QueryException
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    public function hasChildRoleId(string $parentRoleId, string $findingChildId): bool {
        $childIds = $this->getChildIds([$parentRoleId]);
        if (0 < count($childIds)) {
            if (in_array($findingChildId, $childIds, true)) {
                return true;
            }
            foreach ($childIds as $childId) {
                if (true === $this->hasChildRoleId($childId, $findingChildId)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Returns all child role ids for given parent role ids
     *
     * @param string[] $parentIds
     *
     * @return string[]
     * @throws QueryException
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    private function getAllChildRoleIds(array $parentIds): array {
        $allChildIds = [];
        while (0 < count($parentIds)) {
            $parentIds = $this->getChildIds($parentIds);
            $allChildIds[] = $parentIds;
        }
        return array_merge(...$allChildIds);
    }
    /**
     * Returns array of child role ids for given parent role ids
     *
     * @param string[] $parentIds
     *
     * @return string[]
     * @throws QueryException
     * @throws \InvalidArgumentException
     * @throws \RuntimeException
     */
    private function getChildIds(array $parentIds): array {
        $qb = $this->createQueryBuilder('roleHierarchy');
        $qb->select('roleHierarchy.childRoleId')
           ->where(
               $qb->expr()
                  ->in('roleHierarchy.parentRoleId', $parentIds)
           )
           ->indexBy('roleHierarchy', 'roleHierarchy.childRoleId');
        $childRoleIds =
            $qb->getQuery()
               ->getArrayResult();
        return array_keys($childRoleIds);
    }
}
